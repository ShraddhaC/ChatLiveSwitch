// This file has been autogenerated from a class added in the UI designer.

using System;

using Foundation;
using UIKit;
using System.Collections.Generic;
using CoreGraphics;

namespace Chat
{
    public partial class VideoViewController : UIViewController
    {
        public string muteAudioTitle = "Mute Audio";
        public string muteVideoTitle = "Mute Video";
        public string disableAudioTitle = "Disable Audio";
        public string disableVideoTitle = "Disable Video";

        public VideoViewController(IntPtr handle) : base(handle)
        {
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);
           // Chat.App.Instance.videoViewController = this;
        }

        public void ShowLocalContextMenu()
        {
            var alertController = UIAlertController.Create("Local", null, UIAlertControllerStyle.Alert);
            var muteAudio = UIAlertAction.Create(muteAudioTitle, UIAlertActionStyle.Default, alerAction =>
            { App.Instance.ToggleMuteAudio(); });
            var muteVideo = UIAlertAction.Create(muteVideoTitle, UIAlertActionStyle.Default, alerAction =>
            { App.Instance.ToggleMuteVideo(); });
            var disableAudio = UIAlertAction.Create(disableAudioTitle, UIAlertActionStyle.Default, alerAction =>
            { App.Instance.ToggleLocalDisableAudio(); });
            var disableVideo = UIAlertAction.Create(disableVideoTitle, UIAlertActionStyle.Default, alerAction =>
            { App.Instance.ToggleLocalDisableVideo(); });
            var encoding = UIAlertAction.Create("Send Encoding", UIAlertActionStyle.Default, alertAction =>
            { ShowEncodings(null); });
            alertController.AddAction(muteAudio);
            alertController.AddAction(muteVideo);
            alertController.AddAction(disableAudio);
            alertController.AddAction(disableVideo);
            if (App.Instance.encodings != null && App.Instance.encodings.Count > 1)
            {
                alertController.AddAction(encoding);
            }
            var cancel = UIAlertAction.Create("Cancel", UIAlertActionStyle.Cancel, null);
            alertController.AddAction(cancel);
            this.PresentViewController(alertController, true, null);
        }

        public void ShowRemoteContextMenu(string id)
        {
            var alertController = UIAlertController.Create("Remote", null, UIAlertControllerStyle.Alert);
            var disableAudio = UIAlertAction.Create(App.Instance._RemoteAVMaps[id + "DisableAudio"] ? "Enable Audio" : "Disable Audio",
                UIAlertActionStyle.Default, alerAction => { App.Instance.ToggleRemoteDisableAudio(id); });
            var disableVideo = UIAlertAction.Create(App.Instance._RemoteAVMaps[id + "DisableVideo"] ? "Enable Video" : "Disable Video",
                UIAlertActionStyle.Default, alerAction => { App.Instance.ToggleRemoteDisableVideo(id); });
            var encoding = UIAlertAction.Create("Receive Encoding", UIAlertActionStyle.Default, alertAction =>
            { ShowEncodings(id); });
            alertController.AddAction(disableAudio);
            alertController.AddAction(disableVideo);

            int encodingCount = 0;
            foreach (var key in App.Instance._RemoteEncodingMaps.Keys)
            {
                if (key.Contains(id)) encodingCount++;
            }

            if (encodingCount > 1)
            {
                alertController.AddAction(encoding);
            }

            var cancel = UIAlertAction.Create("Cancel", UIAlertActionStyle.Cancel, null);
            alertController.AddAction(cancel);
            this.PresentViewController(alertController, true, null);
        }

        private void ShowEncodings(string id)
        {
            UIAlertController alertController;
            UIAlertAction okAction;

            var tableViewController = new UITableViewController();

            if (id == null)
            {
                alertController = UIAlertController.Create("Send Encoding", null, UIAlertControllerStyle.Alert);
                okAction = UIAlertAction.Create("OK", UIAlertActionStyle.Default, alertAction =>
                { App.Instance.ToggleSendEncoding(); });

                tableViewController.PreferredContentSize = new CGSize(width: 272, height: 44 * App.Instance.encodings.Count);
                tableViewController.TableView.Source = new TableViewSource(App.Instance.encodings);
            }
            else
            {
                alertController = UIAlertController.Create("Receive Encoding", null, UIAlertControllerStyle.Alert);
                okAction = UIAlertAction.Create("OK", UIAlertActionStyle.Default, alertAction =>
                { App.Instance.ToggleReceiveEncoding(id); });

                List<string> encodings = new List<string>();
                foreach (var key in App.Instance._RemoteEncodingMaps.Keys)
                {
                    if (key.Contains(id))
                    {
                        encodings.Add(key.Replace(id, ""));
                    }
                }

                tableViewController.PreferredContentSize = new CGSize(width: 272, height: 44 * encodings.Count);
                tableViewController.TableView.Source = new TableViewSource(encodings);
            }
            alertController.AddAction(okAction);
            
            tableViewController.TableView.BackgroundColor = UIColor.Clear;
            tableViewController.TableView.SeparatorColor = UIColor.Clear;
            
            tableViewController.TableView.AllowsMultipleSelection = id == null ? true : false;
            alertController.SetValueForKey(tableViewController, new NSString("contentViewController"));
            this.PresentViewController(alertController, true, null);
        }
    }

    public class TableViewSource : UITableViewSource
    {
        List<string> tabledata;
        public TableViewSource(List<string> items)
        {
            tabledata = items;
        }

        public override UITableViewCell GetCell(UITableView tableView, NSIndexPath indexPath)
        {
            UITableViewCell cell = tableView.DequeueReusableCell("cell");
            if (cell == null)
            {
                cell = new UITableViewCell(UITableViewCellStyle.Default, "cell");
            }
            cell.TextLabel.Text = tabledata[indexPath.Row];
            cell.BackgroundColor = UIColor.Clear;
            cell.BackgroundView = new UIView();
            cell.SelectedBackgroundView = new UIView();
            if (tableView.AllowsMultipleSelection)
            {
                if (App.Instance.sendEncodings[indexPath.Row])
                {
                    cell.Accessory = UITableViewCellAccessory.Checkmark;
                }
                else
                {
                    cell.Accessory = UITableViewCellAccessory.None;
                }
            }
            else
            {
                if (indexPath.Row == App.Instance.receiveEncoding)
                {
                    cell.Accessory = UITableViewCellAccessory.Checkmark;
                }
                else
                {
                    cell.Accessory = UITableViewCellAccessory.None;
                }
            }

            return cell;
        }

        public override nint RowsInSection(UITableView tableview, nint section)
        {
            return tabledata.Count;
        }

        public override void RowSelected(UITableView tableView, NSIndexPath indexPath)
        {
            //base.RowSelected(tableView, indexPath);
            tableView.DeselectRow(indexPath, true);
            UITableViewCell cell = tableView.CellAt(indexPath);
            if (cell.Accessory == UITableViewCellAccessory.Checkmark && tableView.AllowsMultipleSelection)
            {
                //cell in send pop up table
                App.Instance.sendEncodings[indexPath.Row] = false;

                tableView.ReloadData();
            }
            else
            {
                if (tableView.AllowsMultipleSelection)
                {
                    //cell in send pop up table
                    App.Instance.sendEncodings[indexPath.Row] = true;

                    tableView.ReloadData();
                }
                else
                {
                    //cell in receive pop up table
                    App.Instance.receiveEncoding = indexPath.Row;

                    tableView.ReloadData();
                }
            }


            cell.Accessory = UITableViewCellAccessory.None;

        }

    }
}
